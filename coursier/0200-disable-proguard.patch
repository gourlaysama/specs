From d1c11e40c921642be74dbe1dbd575a792b732ebc Mon Sep 17 00:00:00 2001
From: Antoine Gourlay <antoine@gourlay.fr>
Date: Sun, 9 May 2021 16:11:56 +0200
Subject: [PATCH 200/201] disable proguard

---
 build.sbt              |  18 ++----
 project/Settings.scala | 129 -----------------------------------------
 project/plugins.sbt    |   1 -
 3 files changed, 4 insertions(+), 144 deletions(-)

diff --git a/build.sbt b/build.sbt
index bed0e52..6f85bd8 100644
--- a/build.sbt
+++ b/build.sbt
@@ -219,7 +219,6 @@ lazy val catsJvm = cats.jvm
 lazy val catsJs = cats.js
 
 lazy val `bootstrap-launcher` = project("bootstrap-launcher")
-  .enablePlugins(SbtProguard)
   .disablePlugins(MimaPlugin)
   .configs(Integration)
   .settings(
@@ -233,19 +232,16 @@ lazy val `bootstrap-launcher` = project("bootstrap-launcher")
     ),
     addPathsSources,
     addWindowsAnsiPsSources,
-    mainClass.in(Compile) := Some("coursier.bootstrap.launcher.Launcher"),
-    proguardedBootstrap("coursier.bootstrap.launcher.Launcher", resourceBased = false)
+    mainClass.in(Compile) := Some("coursier.bootstrap.launcher.Launcher")
   )
 
 lazy val `resources-bootstrap-launcher` = project("resources-bootstrap-launcher")
-  .enablePlugins(SbtProguard)
   .disablePlugins(MimaPlugin)
   .settings(
     pureJava,
     dontPublish,
     unmanagedSourceDirectories.in(Compile) ++= unmanagedSourceDirectories.in(`bootstrap-launcher`, Compile).value,
-    mainClass.in(Compile) := Some("coursier.bootstrap.launcher.ResourcesLauncher"),
-    proguardedBootstrap("coursier.bootstrap.launcher.ResourcesLauncher", resourceBased = true)
+    mainClass.in(Compile) := Some("coursier.bootstrap.launcher.ResourcesLauncher")
   )
 
 lazy val launcher = project("launcher")
@@ -632,16 +628,10 @@ lazy val `coursier-repo` = project("coursier-repo")
 
 lazy val bootstrapLaunchersMappings = Def.taskDyn {
 
-  val resourcesBootstrapLauncherOptTask: Def.Initialize[Task[Option[File]]] =
-    if (javaMajorVer > 8)
-      Def.task(None)
-    else
-      Def.task {
-        Some(proguardedJar.in(`resources-bootstrap-launcher`).in(Compile).value)
-      }
+  val resourcesBootstrapLauncherOptTask: Def.Initialize[Task[Option[File]]] = Def.task(None)
 
   val originalBootstrapJar = packageBin.in(`bootstrap-launcher`).in(Compile).value
-  val bootstrapJar = proguardedJar.in(`bootstrap-launcher`).in(Compile).value
+  val bootstrapJar = originalBootstrapJar
   val originalResourcesBootstrapJar = packageBin.in(`resources-bootstrap-launcher`).in(Compile).value
 
   Def.task {
diff --git a/project/Settings.scala b/project/Settings.scala
index 464cd31..b8c051c 100644
--- a/project/Settings.scala
+++ b/project/Settings.scala
@@ -6,8 +6,6 @@ import java.util.{Arrays, Locale}
 
 import Aliases._
 import com.jsuereth.sbtpgp._
-import com.lightbend.sbt.SbtProguard
-import com.lightbend.sbt.SbtProguard.autoImport._
 import sbt._
 import sbt.Keys._
 import sbt.ScriptedPlugin.autoImport.{scriptedBufferLog, scriptedLaunchOpts}
@@ -231,102 +229,6 @@ object Settings {
     )
   }
 
-  // adapted from https://github.com/sbt/sbt-proguard/blob/2c502f961245a18677ef2af4220a39e7edf2f996/src/main/scala/com/typesafe/sbt/SbtProguard.scala#L83-L100
-  lazy val proguardTask: Def.Initialize[Task[Seq[File]]] = Def.task {
-    SbtProguard.writeConfiguration(proguardConfiguration.in(Proguard).value, proguardOptions.in(Proguard).value)
-    val proguardConfigurationValue = proguardConfiguration.in(Proguard).value
-    val javaOptionsInProguardValue = (javaOptions in proguard).value
-    val managedClasspathValue = managedClasspath.in(Proguard).value
-    val streamsValue = streams.value
-    val outputsValue = proguardOutputs.in(Proguard).value
-    val cachedProguard = FileFunction.cached(streams.value.cacheDirectory / "proguard", FilesInfo.hash) { _ =>
-      outputsValue foreach IO.delete
-      streamsValue.log.debug("Proguard configuration:")
-      proguardOptions.in(Proguard).value foreach (streamsValue.log.debug(_))
-      runProguard(proguardConfigurationValue, javaOptionsInProguardValue, managedClasspathValue.files, streamsValue.log)
-      outputsValue.toSet
-    }
-    val inputs = (proguardConfiguration.in(Proguard).value +: SbtProguard.inputFiles(proguardFilteredInputs.in(Proguard).value)).toSet
-
-    // coursier-specific: more aggressive existing file re-use (ran into suspicious multiple runs of proguard on Travis CI)
-    if (outputsValue.exists(!_.exists()))
-      cachedProguard(inputs)
-
-    outputsValue
-  }
-
-  def runProguard(config: File, javaOptions: Seq[String], classpath: Seq[File], log: Logger): Unit = {
-    require(classpath.nonEmpty, "Proguard classpath cannot be empty!")
-    val options = javaOptions ++ Seq("-cp", Path.makeString(classpath), "proguard.ProGuard", "-include", config.getAbsolutePath)
-    log.debug("Proguard command:")
-    log.debug("java " + options.mkString(" "))
-
-    val t = new Thread("proguard-sentinel") {
-      setDaemon(true)
-      override def run() =
-        try {
-          while (true) {
-            Thread.sleep(10000L)
-            scala.Console.err.println("Proguard still running")
-          }
-        } catch {
-          case _: InterruptedException =>
-            scala.Console.err.println("Proguard not running anymore")
-            // normal exit
-        }
-    }
-
-    try {
-      t.start()
-      val exitCode = sys.process.Process("java", options) ! log
-      if (exitCode != 0) sys.error("Proguard failed with exit code [%s]" format exitCode)
-    } finally {
-      if (t.isAlive)
-        t.interrupt()
-    }
-  }
-
-  lazy val proguardedJar = taskKey[File]("")
-
-  lazy val proguardedJarTask = Def.task {
-
-    val results = proguardTask.value
-
-    val orig = results match {
-      case Seq(f0) => f0
-      case Seq() =>
-        throw new Exception("Found no proguarded files. Expected one.")
-      case _ =>
-        throw new Exception("Found several proguarded files. Don't know how to publish all of them.")
-    }
-
-    val destDir = new File(orig.getParentFile, "with-meta-inf")
-    destDir.mkdirs()
-
-    val dest = new File(destDir, orig.getName)
-    Files.deleteIfExists(dest.toPath)
-
-    // TODO Get from original JAR
-    val manifest =
-      s"""Manifest-Version: 1.0
-         |Implementation-Title: ${name.value}
-         |Implementation-Version: ${version.value}
-         |Specification-Vendor: ${organization.value}
-         |Specification-Title: ${name.value}
-         |Implementation-Vendor-Id: ${organization.value}
-         |Specification-Version: ${version.value}
-         |Implementation-URL: ${homepage.value.getOrElse("")}
-         |Implementation-Vendor: ${organization.value}
-         |Main-Class: ${mainClass.in(Compile).value.getOrElse(sys.error("Main class not found"))}
-         |""".stripMargin
-
-    ZipUtil.addToZip(orig, dest, Seq(
-      "META-INF/MANIFEST.MF" -> manifest.getBytes(StandardCharsets.UTF_8)
-    ))
-
-    dest
-  }
-
   lazy val Integration = config("it").extend(Test)
 
   // For whatever reason, it seems this messes with the terminal on Windows,
@@ -524,37 +426,6 @@ object Settings {
     }
   }
 
-  def proguardedBootstrap(mainClass: String, resourceBased: Boolean): Seq[Setting[_]] = {
-
-    val extra =
-      if (resourceBased)
-        Seq("-keep class coursier.bootstrap.launcher.jar.Handler {\n}")
-      else
-        Nil
-
-    val fileName =
-      if (resourceBased)
-        "bootstrap-resources.jar"
-      else
-        "bootstrap.jar"
-
-    Seq(
-      proguardBinaryDeps.in(Proguard) := getAllBinaryDeps.value, // seems needed with sbt 1.4.0
-      proguardBinaryDeps.in(Proguard) ++= rtJarOpt.toSeq, // seems needed with sbt 1.4.0
-      proguardedJar := proguardedJarTask.value,
-      proguardVersion.in(Proguard) := Deps.proguardVersion,
-      proguardOptions.in(Proguard) ++= Seq(
-        "-dontnote",
-        "-dontwarn",
-        "-repackageclasses coursier.bootstrap.launcher",
-        s"-keep class $mainClass {\n  public static void main(java.lang.String[]);\n}",
-        "-keep class coursier.bootstrap.launcher.SharedClassLoader {\n  public java.lang.String[] getIsolationTargets();\n}"
-      ) ++ extra,
-      javaOptions.in(Proguard, proguard) := Seq("-Xmx3172M"),
-      artifactPath.in(Proguard) := proguardDirectory.in(Proguard).value / fileName
-    )
-  }
-
   lazy val javaMajorVer = sys.props("java.version").takeWhile(_.isDigit).toInt
 
   def classloadersForCustomProtocolTest(fromProject: Project): Setting[Seq[Task[Seq[java.io.File]]]] = 
diff --git a/project/plugins.sbt b/project/plugins.sbt
index 7abaa42..6f468de 100644
--- a/project/plugins.sbt
+++ b/project/plugins.sbt
@@ -4,7 +4,6 @@ plugins_(
   "pl.project13.scala" % "sbt-jmh"                  % "0.4.0",
   "org.scalameta"      % "sbt-mdoc"                 % "2.2.1",
   "org.xerial.sbt"     % "sbt-pack"                 % "0.13",
-  "com.lightbend.sbt"  % "sbt-proguard"             % "0.4.0",
   "org.scala-js"       % "sbt-scalajs"              % "1.2.0",
   "ch.epfl.scala"      % "sbt-scalajs-bundler"      % "0.18.0",
   "org.portable-scala" % "sbt-scalajs-crossproject" % "1.0.0",
-- 
2.31.1

